import React, { useState, useEffect } from "react";
import Plotly from "react-plotly.js";
import "./SymbolGraph.style.scss";
// import apiResponse from "./bhp-history-all.json";

const defaultConfig = {
  displaylogo: false,
  // modeBarButtonsToRemove: ['pan2d','select2d','lasso2d','resetScale2d','zoomOut2d'],
  displayModeBar: false
};
const defaultLayout = {
  hovermode: "closest",
  margin: {
    l: 32,
    t: 0,
    b: 32,
    r: 32
  },
  autosize: true,
  // width: 1000,
  // height: 600,
  style: {
    width: "100%",
    height: "100%"
  },
  // title: "Yoyoyo!",
  paper_bgcolor: "#0f162d",
  plot_bgcolor: "#0f162d",
  showlegend: false,
  xaxis: {
    fixedrange: true,
    showticklabels: false,
    showline: true,
    showgrid: false,
    // showticklabels: true,
    linecolor: "#1f2a50",
    // linewidth: 1,
    // autotick: false,
    // ticks: "outside",
    // tickcolor: "rgb(204,204,204)",
    // tickwidth: 1,
    // ticklen: 2,
    // tickfont: {
    //   family: "Arial",
    //   size: 12,
    //   color: "white"
    // },
    // rangeselector: {
    //   buttons: [
    //     {
    //       count: 1,
    //       label: "1m",
    //       step: "month",
    //       stepmode: "backward"
    //     },
    //     {
    //       count: 6,
    //       label: "6m",
    //       step: "month",
    //       stepmode: "backward"
    //     },
    //     { step: "all" }
    //   ]
    // },
    // rangeslider: {},
    // type: "date"
    type: "category",
    categoryorder: "category ascending"
  },
  yaxis: {
    fixedrange: true,
    showticklabels: false,
    showgrid: false,
    zeroline: false,
    showline: true,
    linecolor: "#1f2a50"
    // showline: false,
    // showticklabels: false,
    // tickfont: {
    //   family: "Arial",
    //   size: 12,
    //   color: "white"
    // }
  }
};

const SymbolGraph = ({ historicalData, intradayData }) => {
  const [data, setData] = useState(null);
  const [layout, setLayout] = useState(defaultLayout);

  const [processedHistoricalData, setProcessedHistoricalData] = useState(null);
  const [processedIntradayData, setProcessedIntradayData] = useState(null);

  // const [frames, setFrames] = useState([]);
  const [config, setConfig] = useState(defaultConfig);

  useEffect(() => {
    if (historicalData) {
      const xAxis = Object.keys(historicalData.history).map(item => item);
      const yAxis = Object.keys(historicalData.history).map(
        item => historicalData.history[item].close
      );
      const defaultData = [
        {
          x: xAxis,
          y: yAxis,
          hovertemplate: "Price: $%{y:.2f}" + "<br>Date: %{x}<extra></extra>",
          type: "scatter",
          mode: "lines",
          line: {
            color: "#87b5dc",
            width: 0.75
          },
          marker: { color: "white" },
          hoverlabel: {
            align: "left",
            bgcolor: "#1f2a50",
            bordercolor: "#1f2a50",
            font: {
              family: "Lato",
              size: 24,
              color: "white"
            }
          }
        }
        // { type: "bar", x: [1, 2, 3], y: [2, 5, 3] }
      ];
      setProcessedHistoricalData(defaultData);
    }
  }, [historicalData]);

  useEffect(() => {
    if (intradayData) {
      const mostRecentDay = Object.keys(intradayData.intraday)[0].slice(0, 10);

      const xAxisOneDay = Object.keys(intradayData.intraday).filter(
        item => item.slice(0, 10) === mostRecentDay
      );
      const yAxisOneDay = Object.keys(intradayData.intraday)
        .filter(item => item.slice(0, 10) === mostRecentDay)
        .map(item => intradayData.intraday[item].close);

      const xAxisSevenDay = Object.keys(intradayData.intraday).map(
        item => item
      );
      const yAxisSevenDay = Object.keys(intradayData.intraday).map(
        item => intradayData.intraday[item].close
      );
      const defaultData = [
        {
          x: xAxisOneDay,
          y: yAxisOneDay,
          type: "scatter",
          mode: "lines",
          line: {
            color: "#87b5dc",
            width: 0.75
          },
          marker: { color: "white" }
        }
        // { type: "bar", x: [1, 2, 3], y: [2, 5, 3] }
      ];
      setProcessedIntradayData(defaultData);
    }
  }, [intradayData]);

  return (
    <div className="SymbolGraph">
      <h3>Graph</h3>
      <button onClick={() => setData(processedHistoricalData)}>
        Historical
      </button>
      <button onClick={() => setData(processedIntradayData)}>Intraday</button>
      {data && (
        <Plotly
          data={data}
          layout={layout}
          config={config}
          useResizeHandler={true}
          style={{ width: "100%", height: "100%" }}
        />
      )}
    </div>
  );
};

export default SymbolGraph;
